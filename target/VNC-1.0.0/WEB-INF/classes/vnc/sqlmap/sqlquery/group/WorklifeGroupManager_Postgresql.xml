<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.worklife.manager.group.service.WorklifeGroupService">
    <resultMap id="WorklifeGroup" type="WorklifeGroupVO">
        <result property="groupId" column="group_id"/>
        <result property="groupName" column="group_name"/>
        <result property="abbreviation" column="abbreviation"/>
        <result property="groupDescription" column="group_description"/>
        <result property="parentId" column="parent_id"/>
        <result property="parentName" column="parent_name"/>
        <result property="isDepartment" column="is_department"/>
        <result property="mahuyen" column="mahuyen"/>
        <result property="listNameOfParent" column="list_name_of_parent"/>
        <result property="listIdOfParent" column="list_id_of_parent"/>
        <result property="createAt" column="create_at"/>
        <result property="updateAt" column="update_at"/>
    </resultMap>

    <insert id="insertGroup">
    	SET search_path TO 'public';
        <selectKey keyProperty="groupId" resultType="int" order="AFTER">
            SELECT currval('group_group_id_seq');
        </selectKey>
        INSERT INTO "group"( 	group_name,
        						abbreviation,
						        group_description,
						        parent_id,
						        mahuyen,
						        is_department,
						        create_at,
						        update_at
        					)
        VALUES				( 	#{groupName},
        						#{abbreviation},
						        #{groupDescription},
						        #{parentId},
						        #{mahuyen},
						        #{isDepartment},
						        #{createAt},
						        #{updateAt}
						    )
    </insert>

    <update id="updateGroup" parameterType="WorklifeGroupVO">
    	SET search_path TO 'public';
        UPDATE "group"
        SET 	group_name 			= #{groupName},
        		abbreviation		= #{abbreviation},
        		group_description 	= #{groupDescription},
        		parent_id 			= #{parentId},
        		mahuyen 			= #{mahuyen},
        		is_department 		= #{isDepartment},
        		update_at 			= #{updateAt}
        WHERE 	group_id 			= #{groupId}
    </update>

    <delete id="deleteSingleGroupByGroupId" parameterType="int">
    	SET search_path TO 'public';
        DELETE
        FROM "group"
        WHERE group_id = #{groupId}
    </delete>

    <delete id="deleteMultiGroupSameParentId" parameterType="int">
    	SET search_path TO 'public';
        DELETE
        FROM "group"
        WHERE parent_id = #{parentId}
    </delete>

    <select id="selectGroupByGroupId" resultMap="WorklifeGroup">
    	SET search_path TO 'public';
        SELECT 	group_id,
		        group_name,
		        abbreviation,
		        group_description,
		        parent_id,
		        (SELECT group_name FROM "group" WHERE group_id = (SELECT parent_id FROM "group" WHERE group_id = #{groupId})) AS
		        parent_name,
		        mahuyen,
		        is_department,
		        getFullPathOfGroup(parent_id) AS list_name_of_parent,
		        getFullListParentofGroup(parent_id) AS list_id_of_parent,
		        create_at,
		        update_at
        FROM 	"group"
        WHERE 	group_id = #{groupId}
    </select>

    <select id="selectGroupWithFullPathNameByGroupId" parameterType="WorklifeGroupVO" resultMap="WorklifeGroup" statementType="CALLABLE">
    	SET search_path TO 'public';
        SELECT 	group_id,
		        group_name,
		        abbreviation,
		        group_description,
		        parent_id,
		        (SELECT group_name FROM "group" WHERE group_id = (SELECT parent_id FROM "group" WHERE group_id = #{groupId})) AS
		        parent_name,
		        mahuyen,
		        is_department,
		        getFullPathOfGroup(parent_id) AS list_name_of_parent,
		        getFullListParentofGroup(parent_id) AS list_id_of_parent,
		        create_at,
		        update_at
        FROM 	"group"
        WHERE 	group_id = #{groupId}
    </select>

    <select id="selectMultiGroupByParentIdForDropdownlist" parameterType="WorklifeGroupVO" resultMap="WorklifeGroup">
    	SET search_path TO 'public';
        SELECT 	group_id,
		        group_name,
		        abbreviation,
		        group_description,
		        parent_id,
		        (SELECT group_name FROM "group" WHERE group_id = (SELECT parent_id FROM "group" WHERE group_id = #{groupId})) AS
		        parent_name,
		        mahuyen,
		        is_department,
		        getFullPathOfGroup(parent_id) AS list_name_of_parent,
		        getFullListParentofGroup(parent_id) AS list_id_of_parent,
		        create_at,
		        update_at
        FROM 	"group"
        WHERE 1 = 1
        <if test="idGroupUserLogin != idSuperAdminGroup">
        	AND group_id = #{idGroupUserLogin}
        </if>
        <if test="parentId > -2 and idGroupUserLogin == idSuperAdminGroup">
            AND parent_id = #{parentId}
        </if>
        <if test="groupId > -1 and idGroupUserLogin == idSuperAdminGroup">
            <![CDATA[ AND 	group_id 	<> #{groupId} ]]>
        </if>
    </select>

    <select id="selectMultiGroupByParentId" parameterType="WorklifeGroupVO" resultMap="WorklifeGroup">
    	SET search_path TO 'public';
        SELECT 	group_id,
		        group_name,
		        abbreviation,
		        group_description,
		        parent_id,
		        (SELECT group_name FROM "group" WHERE group_id = (SELECT parent_id FROM "group" WHERE group_id = #{groupId})) AS
		        parent_name,
		        mahuyen,
		        is_department,
		        getFullPathOfGroup(parent_id) AS list_name_of_parent,
		        getFullListParentofGroup(parent_id) AS list_id_of_parent,
		        create_at,
		        update_at
        FROM 	"group"
        WHERE 	1 = 1
        
        <!-- Nếu User ko phải nằm trong Group SuperAdmin  -->
        <if test="idGroupUserLogin != idSuperAdminGroup">
        	AND group_id IN
        	
        	(WITH RECURSIVE t(group_id)
				AS (
					SELECT 
						group_id
					FROM "group"
					WHERE group_id = #{idGroupUserLogin}
			
					UNION All
					SELECT b.group_id
					FROM t as a, "group" as b
					WHERE a.group_id = b.parent_id
				)
				
				SELECT 
				DISTINCT
					a.group_id
				FROM t a
        	)
        </if>
        
        <if test="parentId > -2">
            AND parent_id = #{parentId}
        </if>
        <if test="search != '' and search != null">
            AND (lower(group_name) LIKE lower(CONCAT('%', #{search}, '%'))
            OR lower(group_description) LIKE lower(CONCAT('%', #{search}, '%'))
            OR lower(abbreviation) LIKE lower(CONCAT('%', #{search}, '%'))
            OR lower(getFullPathOfGroup(parent_id)) LIKE lower(CONCAT('%', #{search}, '%')))
        </if>
        <if test="columnName != '' and columnName != null">
            <if test="typeOrder != '' and typeOrder != null">
                ORDER BY
                <if test="columnName == 'group_name'">
                    group_name
                </if>
                <if test="columnName == 'group_description'">
                    group_description
                </if>
                <if test="typeOrder == 'desc'">
                    DESC
                </if>
                <if test="typeOrder == 'asc'">
                    ASC
                </if>
            </if>
        </if>
        LIMIT #{recordCountPerPage} OFFSET #{firstIndex}
    </select>

    <select id="selectMultiGroupWithFullPathNameByParentId" parameterType="WorklifeGroupVO" resultMap="WorklifeGroup" statementType="CALLABLE">
    	SET search_path TO 'public';
        SELECT 	group_id,
		        group_name,
		        abbreviation,
		        group_description,
		        parent_id,
		        (SELECT group_name FROM "group" WHERE group_id = (SELECT parent_id FROM "group" WHERE group_id = #{groupId})) AS
		        parent_name,
		        mahuyen,
		        is_department,
		        getFullPathOfGroup(parent_id) AS list_name_of_parent,
		        getFullListParentofGroup(parent_id) AS list_id_of_parent,
		        create_at,
		        update_at
        FROM 	"group"
        WHERE 	1 = 1
        <if test="parentId > -2">
            AND parent_id = #{parentId}
        </if>
        <if test="search != '' and search != null">
            AND (lower(group_name) LIKE lower(CONCAT('%', #{search}, '%'))
            OR lower(group_description) LIKE lower(CONCAT('%', #{search}, '%')))
        </if>
        <if test="columnName != '' and columnName != null">
            <if test="typeOrder != '' and typeOrder != null">
                ORDER BY
                <if test="columnName == 'group_name'">
                    group_name
                </if>
                <if test="columnName == 'group_description'">
                    group_description
                </if>
                <if test="typeOrder == 'desc'">
                    DESC
                </if>
                <if test="typeOrder == 'asc'">
                    ASC
                </if>
            </if>
        </if>
        LIMIT #{recordCountPerPage} OFFSET #{firstIndex}
    </select>

    <select id="countMultiGroupByGroupId" parameterType="WorklifeGroupVO" resultType="int">
    	SET search_path TO 'public';
        <!-- SELECT 	COUNT(*)
        FROM 	"group"
        WHERE 	1 = 1
        Nếu User ko thuộc Group SuperAdmin thì chỉ load những Group thuộc nhánh chứa User với Root là User đăng nhập 
        <if test="idGroupUserLogin != idSuperAdminGroup" >
        	AND group_id IN
        	
        	(WITH RECURSIVE t(group_id)
				AS (
					SELECT 
						group_id
					FROM "group"
					WHERE group_id = #{idGroupUserLogin}
			
					UNION All
					SELECT b.group_id
					FROM t as a, "group" as b
					WHERE a.group_id = b.parent_id
				)
				
				SELECT 
				DISTINCT
					a.group_id
				FROM t a
        	)
        </if>
        <if test="parentId > -2">
            AND parent_id = #{parentId}
        </if>
        <if test="search != ''">
            AND (group_name LIKE CONCAT('%', #{search}, '%')
            OR group_description LIKE CONCAT('%', #{search}, '%'))
        </if> -->
        
        <!--  -->
        SELECT COUNT(*)
        FROM
        (
        	SELECT 	group_id,
		        group_name,
		        abbreviation,
		        group_description,
		        parent_id,
		        (SELECT group_name FROM "group" WHERE group_id = (SELECT parent_id FROM "group" WHERE group_id = #{groupId})) AS
		        parent_name,
		        mahuyen,
		        is_department,
		        getFullPathOfGroup(parent_id) AS list_name_of_parent,
		        getFullListParentofGroup(parent_id) AS list_id_of_parent,
		        create_at,
		        update_at
	        FROM 	"group"
	        WHERE 	1 = 1
	        
	        <!-- Nếu User ko phải nằm trong Group SuperAdmin  -->
	        <if test="idGroupUserLogin != idSuperAdminGroup">
	        	AND group_id IN
	        	
	        	(WITH RECURSIVE t(group_id)
					AS (
						SELECT 
							group_id
						FROM "group"
						WHERE group_id = #{idGroupUserLogin}
				
						UNION All
						SELECT b.group_id
						FROM t as a, "group" as b
						WHERE a.group_id = b.parent_id
					)
					
					SELECT 
					DISTINCT
						a.group_id
					FROM t a
	        	)
	        </if>
	        
	        <if test="parentId > -2">
	            AND parent_id = #{parentId}
	        </if>
	        <if test="search != '' and search != null">
	            AND (lower(group_name) LIKE lower(CONCAT('%', #{search}, '%'))
	            OR lower(group_description) LIKE lower(CONCAT('%', #{search}, '%'))
	            OR lower(abbreviation) LIKE lower(CONCAT('%', #{search}, '%'))
	            OR lower(getFullPathOfGroup(parent_id)) LIKE lower(CONCAT('%', #{search}, '%')))
	        </if>
	        <if test="columnName != '' and columnName != null">
	            <if test="typeOrder != '' and typeOrder != null">
	                ORDER BY
	                <if test="columnName == 'group_name'">
	                    group_name
	                </if>
	                <if test="columnName == 'group_description'">
	                    group_description
	                </if>
	                <if test="typeOrder == 'desc'">
	                    DESC
	                </if>
	                <if test="typeOrder == 'asc'">
	                    ASC
	                </if>
	            </if>
	        </if>
        )AS t
    </select>

    <select id="checkGroupHavingChildren" parameterType="WorklifeGroupVO" resultType="int">
    	SET search_path TO 'public';
        SELECT 	COUNT(*)
        FROM 	"group"
        WHERE 	parent_id = #{groupId}
    </select>

    <select id="getListChildrenId" parameterType="WorklifeGroupVO" resultType="int">
    	SET search_path TO 'public';
        SELECT 	group_id
        FROM 	"group"
        WHERE 	parent_id = #{parentId}
    </select>

    <select id="checkGroupHasUser" parameterType="int" resultType="int">
    	SET search_path TO 'public';
        SELECT 	COUNT(*)
        FROM 	"users"
        WHERE 	group_id = #{groupId}
    </select>
</mapper>