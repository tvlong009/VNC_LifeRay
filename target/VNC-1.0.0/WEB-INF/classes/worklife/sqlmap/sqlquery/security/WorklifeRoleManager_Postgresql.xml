<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.worklife.manager.security.service.WorklifeRoleService">
    <resultMap id="WorklifeRole" type="WorklifeRoleVO">
        <result property="roleId" column="role_id"/>
        <result property="groupId" column="group_id"/>
        <result property="roleName" column="role_name"/>
        <result property="roleCode" column="role_code"/>
        <result property="roleDescription" column="role_description"/>
        <result property="createAt" column="create_at"/>
        <result property="updateAt" column="update_at"/>
        <association property="group" javaType="WorklifeGroupVO" select="com.worklife.manager.group.service.WorklifeGroupService.selectGroupByGroupId" column="{groupId=group_id}"></association>
    </resultMap>
    
    <resultMap id="WorklifeRoleWithStatus" type="WorklifeRoleVO">
        <result property="roleId" column="role_id"/>
        <result property="groupId" column="group_id"/>
        <result property="roleName" column="role_name"/>
        <result property="roleCode" column="role_code"/>
        <result property="roleDescription" column="role_description"/>
        <result property="createAt" column="create_at"/>
        <result property="updateAt" column="update_at"/>
        <result property="roleStatus" column="role_status"/>        
    </resultMap>
    
    <resultMap id="WorklifeSingleRole" type="WorklifeRoleVO">
        <result property="roleId" column="role_id"/>
        <result property="groupId" column="group_id"/>
        <result property="roleName" column="role_name"/>
        <result property="roleCode" column="role_code"/>
        <result property="roleDescription" column="role_description"/>
        <result property="createAt" column="create_at"/>
        <result property="updateAt" column="update_at"/>
       	<association property="group" javaType="WorklifeGroupVO" select="com.worklife.manager.group.service.WorklifeGroupService.selectGroupByGroupId" column="{groupId=group_id}"></association>
       	<collection property="listPermission" javaType="ArrayList" select="com.worklife.manager.security.service.WorklifePermissionService.selectListPermissionByRoleId" column="{roleId=role_id}"></collection>
    </resultMap>
    <resultMap id="WorklifeRoleCheck" type="WorklifeRoleVO">
        <result property="roleId" column="role_id"/>
    </resultMap>

    <insert id="insertRole">
    	SET search_path TO 'public';
        <selectKey keyProperty="roleId" resultType="int" order="AFTER">
            SELECT currval('role_role_id_seq');
        </selectKey>
        INSERT INTO role( 	group_id,
				        	role_name,
				        	role_code,
				        	role_description,
				        	create_at,
				        	update_at
   						)
        		VALUES(		#{groupId},
        					#{roleName},
        					#{roleCode},
        					#{roleDescription},
				        	NOW(),
				        	NOW()
						)
    </insert>
    
    <!-- Nhat fix check role_code -->
    <select id="checkRoleExsit" resultMap="WorklifeRoleCheck">
    	SET search_path TO 'public';
    	SELECT role_id FROM role WHERE role_code = #{roleCode} LIMIT 1
    </select>
    
    <insert id="intertNewPermission4Role" parameterType="WorklifeRoleGroupVO">
    	SET search_path TO 'public';
    	INSERT INTO role_group (group_id,
    							permission_id,
    							role_id) 
    	VALUES (				#{groupId},
    							#{permissionId},
    							#{roleId}
    							)
    </insert>

    <insert id="insertRoleUser">
    	SET search_path TO 'public';
        INSERT INTO role_user( 	id_user,
				        		role_id
   						)
        		VALUES(			#{userId},
        						#{roleId}
						)
    </insert>
    
    <update id="updateRole" parameterType="WorklifeRoleVO">
    	SET search_path TO 'public';
      	UPDATE 	role
        SET 	role_name 			= #{roleName},
		        role_description 	= #{roleDescription},
		        update_at 			= NOW()
        WHERE 	role_id 			= #{roleId}
    </update>
    
    <delete id="deleteSingleRoleByRoleId" parameterType="int">
    	SET search_path TO 'public';
        DELETE
        FROM 	role
        WHERE 	role_id = #{roleId}
    </delete>
    
    <delete id="deleteRoleGroupByRoleId" parameterType="int">
    	SET search_path TO 'public';
        DELETE
        FROM 	role_group
        WHERE 	role_id = #{roleId}
    </delete>
    
    <delete id="deleteRoleGroupByGroupId" parameterType="int">
    	SET search_path TO 'public';
        DELETE
        FROM 	role_group
        WHERE 	group_id = #{groupId}
    </delete>
    
    <delete id="deleteRoleGroupByPermissionId" parameterType="int">
    	SET search_path TO 'public';
        DELETE
        FROM 	role_group
        WHERE 	permission_id = #{permissionId}
    </delete>
    
    <delete id="deleteRoleGroupByGroupIdAndPermissionId" parameterType="WorklifePermissionGroupVO">
    	SET search_path TO 'public';
        DELETE
        FROM 	role_group
        WHERE 	group_id = #{groupId}
        AND		permission_id = #{permissionId}
    </delete>
    
    <delete id="deleteRoleUserByUserId" parameterType="int">
    	SET search_path TO 'public';
        DELETE
        FROM 	role_user
        WHERE 	id_user = #{userId}
    </delete>
    
    <delete id="deleteRoleUserByRoleId" parameterType="int">
    	SET search_path TO 'public';
        DELETE
        FROM 	role_user
        WHERE 	role_id = #{roleId}
    </delete>
    
    <delete id="deleteRoleUser" parameterType="WorklifeRoleUserVO">
    	SET search_path TO 'public';
        DELETE
        FROM 	role_user
        WHERE 	role_id = #{roleId}
        AND		id_user = #{userId}
    </delete>
    
    <select id="selectAllRoleByGroupId" parameterType="java.util.Map" resultMap="WorklifeRoleWithStatus">
    	SET search_path TO 'public';
        SELECT 	role.*,
        		(	SELECT 	CASE WHEN id_user IS NOT NULL 
        					THEN 'Y' 
        					ELSE 'N' END 
        			FROM 	role_user 
        			WHERE 	role_user.role_id = role.role_id 
        			AND 	role_user.id_user = #{userId}
        		) AS role_status
        FROM	role
        WHERE 	group_id = #{groupId}
    </select>
    
    <select id="selectListRoleByGroupId" parameterType="WorklifeRoleVO" resultMap="WorklifeRole">
    	SET search_path TO 'public';
        SELECT 	role.*
        FROM	role
        INNER JOIN "group" AS g ON g.group_id = role.group_id
        WHERE 	1 = 1
        <if test="groupId != null and groupId > 0">
        	<!-- AND role.group_id = #{groupId} -->
        	AND role.group_id IN
        	<!-- Get all group id from root (id is groupId) to all child  -->
			(WITH RECURSIVE t(group_id)
				AS (
					SELECT 
						group_id
					FROM "group"
					WHERE group_id = #{idGroupUserLogin}
			
					UNION All
					SELECT b.group_id
					FROM t as a, "group" as b
					WHERE a.group_id = b.parent_id
					
				)
				
				SELECT 
				DISTINCT
					a.group_id
				FROM t a
			)
        </if>
        <if test="search != '' and search != null">
            AND (	lower(role.role_name) LIKE lower(CONCAT('%', #{search}, '%'))
            		OR lower(role.role_code) LIKE lower(CONCAT('%', #{search}, '%')) 
            		OR lower(role.role_description) LIKE lower(CONCAT('%', #{search}, '%'))
            		OR lower(g.group_name) LIKE lower(CONCAT('%', #{search}, '%')))
        </if>
        <if test="columnName != '' and columnName != null">
            <if test="typeOrder != '' and typeOrder != null">
                ORDER BY
                <if test="columnName == 'role_name'">
                    role_name
                </if>
                <if test="columnName == 'role_code'">
                    role_code
                </if>
                <if test="typeOrder == 'desc'">
                    DESC
                </if>
                <if test="typeOrder == 'asc'">
                    ASC
                </if>
            </if>
        </if>
        LIMIT #{recordCountPerPage} OFFSET #{firstIndex}
    </select>
    
    <select id="countListRoleByGroupId" parameterType="WorklifeRoleVO" resultType="int">
    	SET search_path TO 'public';
        <!-- SELECT 	COUNT(role.*)
        FROM	role
        WHERE	1 = 1
        <if test="groupId != null and groupId >= 0">
			AND group_id IN
			(WITH RECURSIVE t(group_id)
				AS (
					SELECT 
						group_id
					FROM "group"
					WHERE group_id = #{idGroupUserLogin}
			
					UNION All
					SELECT b.group_id
					FROM t as a, "group" as b
					WHERE a.group_id = b.parent_id
					
				)
				
				SELECT 
				DISTINCT
					a.group_id
				FROM t a
			)
		</if>
		
        <if test="groupId > -1">
        	AND group_id = #{groupId}
        </if>
        <if test="search != '' and search != null">
            AND (	role.role_name LIKE CONCAT('%', #{search}, '%')
            		OR role.role_code LIKE CONCAT('%', #{search}, '%') 
            		OR role.role_description LIKE CONCAT('%', #{search}, '%'))
        </if> -->
        
        
        <!--Edit by ThuongPham  -->
        SELECT COUNT(*)
        FROM
        (
        	SELECT 	role.*
	        FROM	role
	        INNER JOIN "group" AS g ON g.group_id = role.group_id
	        WHERE 	1 = 1
	        <if test="groupId != null and groupId > 0">
	        	<!-- AND role.group_id = #{groupId} -->
	        	AND role.group_id IN
	        	<!-- Get all group id from root (id is groupId) to all child  -->
				(WITH RECURSIVE t(group_id)
					AS (
						SELECT 
							group_id
						FROM "group"
						WHERE group_id = #{idGroupUserLogin}
				
						UNION All
						SELECT b.group_id
						FROM t as a, "group" as b
						WHERE a.group_id = b.parent_id
						
					)
					
					SELECT 
					DISTINCT
						a.group_id
					FROM t a
				)
	        </if>
	        <if test="search != '' and search != null">
	            AND (	lower(role.role_name) LIKE lower(CONCAT('%', #{search}, '%'))
	            		OR lower(role.role_code) LIKE lower(CONCAT('%', #{search}, '%')) 
	            		OR lower(role.role_description) LIKE lower(CONCAT('%', #{search}, '%'))
	            		OR lower(g.group_name) LIKE lower(CONCAT('%', #{search}, '%')))
	        </if>
	        <if test="columnName != '' and columnName != null">
	            <if test="typeOrder != '' and typeOrder != null">
	                ORDER BY
	                <if test="columnName == 'role_name'">
	                    role_name
	                </if>
	                <if test="columnName == 'role_code'">
	                    role_code
	                </if>
	                <if test="typeOrder == 'desc'">
	                    DESC
	                </if>
	                <if test="typeOrder == 'asc'">
	                    ASC
	                </if>
	            </if>
	        </if>
        ) AS t
        
    </select>
    
    <select id="checkRoleUsedOrNotUsed" parameterType="int" resultType="int">
    	SET search_path TO 'public';
        SELECT 	COUNT(role_user.*)
        FROM	role_user
        WHERE	role_id = #{roleId}
    </select>
    
    <select id="selectRoleByUserId" resultMap="WorklifeSingleRole">
    	SET search_path TO 'public';
        SELECT 	role.*
        FROM	role
        INNER JOIN role_user ON role_user.role_id = role.role_id
        WHERE 	id_user 	= #{userId}
    </select>
    
    <select id="selectListRoleNameByUserId" resultType="String">
    	SET search_path TO 'public';
        SELECT 	string_agg(role.role_name, ',')
        FROM	role
        INNER JOIN role_user ON role_user.role_id = role.role_id
        WHERE 	id_user 	= #{userId}
    </select>
    
    <select id="selectRoleByRoleId" resultMap="WorklifeSingleRole">
    	SET search_path TO 'public';
        SELECT 	role.*
        FROM	role
        WHERE 	role_id 	= #{roleId}
    </select>
</mapper>